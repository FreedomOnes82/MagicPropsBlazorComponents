@page "/popupdemo";
@using MagicPropsComponents.ViewModels.Popup
@rendermode @(new InteractiveServerRenderMode(prerender:false) )

<h3>Popup Demo</h3>
<hr />
<div>
    <p>Click this button to show up Popup</p>
    <button class="btn btn-primary" id="btnTrigger">Click to Review</button>
    <MagicPropsComponents.Components.Popup.MPPopup TriggerEleID="btnTrigger" AnchorPointType="AnchorPointType.TriggerRightTop"
                                                   Visible="true" Toward="PopupToward.BottomRight" BorderRadius="2" Width="200" Height="150">
        <h3>Test Popup trigger by Button</h3>
    </MagicPropsComponents.Components.Popup.MPPopup>
</div>
<br />
<hr />
<div>
    <p>Click this link to show up Popup</p>
    <a class="link-info" id="linkId">Link Trigger</a>
    <MagicPropsComponents.Components.Popup.MPPopup TriggerEleID="linkId" AnchorPointType="AnchorPointType.TriggerRightBottom"
                                                   Visible="false" Toward="PopupToward.TopLeft" BorderRadius="5" ClientID="linkPopup">
        <h3>Link trigger Popup</h3>
    </MagicPropsComponents.Components.Popup.MPPopup>
</div>
<br />
<hr />

<div>
    <p>Click this div to show up Popup with Close Button</p>
    <div style="width:200px;height:100px;background-color:#0dcaf0;margin-top:10px;margin-left:10px;" id="divTrigger">
        Div trigger
    </div>
    <MagicPropsComponents.Components.Popup.MPPopup TriggerEleID="divTrigger" AnchorPointType="AnchorPointType.TriggerRightBottom" @ref=divpopupele
                                                   Toward="PopupToward.TopRight" BorderRadius="2">
        <h3>Div Test Popup</h3><button @onclick="async()=>{await divpopupele.Hide();}">Click to close</button>
    </MagicPropsComponents.Components.Popup.MPPopup>
</div>
<br />
<hr />

<div>
    <p>Click this button to see popup base on Custom AnchorPoint(x:600,y:200)</p>
    <button class="mb-3" id="@_cusTriggerId">Custom AnchorPoint Trigger</button>
    <MagicPropsComponents.Components.Popup.MPPopup TriggerEleID="@_cusTriggerId" AnchorPointX="600" AnchorPointY="200" Toward="GetToward()" BorderRadius="2">
        <h3>Custom AnchorPoint(x:600,y:200)</h3>
    </MagicPropsComponents.Components.Popup.MPPopup>
</div>


@code {
    private string _cusTriggerId = string.Empty;
    private MagicPropsComponents.Components.Popup.MPPopup divpopupele;

    protected override void OnInitialized()
    {
        if (string.IsNullOrEmpty(_cusTriggerId))
        {
            _cusTriggerId = "cus_"+Guid.NewGuid().ToString().Replace("-", "");
           
        }
        base.OnInitialized();
    }

    private int flag1 = 0;
   
    private PopupToward GetToward()
    {
        switch (flag1)
        {
            case 0: return PopupToward.TopLeft;
            case 1: return PopupToward.TopRight;
            case 2: return PopupToward.TriggerTopCenter;
            case 3: return PopupToward.BottomLeft;
            case 4: return PopupToward.BottomRight;
            case 5: return PopupToward.TriggerBottomCenter;
            case 6: return PopupToward.TriggerLeftCenter;
            case 7: return PopupToward.TriggerRightCenter;
            default: return PopupToward.TopRight;
        }
    }
    private int flag2 = 0;
   
    private AnchorPointType GetAnchorPointType()
    {
        switch (flag2)
        {
            case 0: return AnchorPointType.TriggerLeftTop;
            case 1: return AnchorPointType.TriggerLeftBottom;
            case 2: return AnchorPointType.TriggerRightTop;
            case 3: return AnchorPointType.TriggerRightBottom;
            case 4: return AnchorPointType.TriggerCenter;
            default: return AnchorPointType.TriggerCenter;
        }
    }

}
