@page "/checkboxgroupdemo"
@rendermode @(new InteractiveServerRenderMode(prerender:false) )
@using MagicPropsComponents.Components.CheckboxGroup;
@using MagicPropsComponents.ViewModels.SelectionGroup;
@using System.ComponentModel.DataAnnotations;

<h3>Checkbox Group Demo</h3>
<hr/>
<div>
    <span style="font-weight:bold;">Checkboxes displayed horizontally with normal button</span>
    <br/>
    <span style="padding-right:10px;"> Selected Value: @_value1</span>
    <br/>
    <MagicPropsComponents.Components.CheckboxGroup.MPCheckboxGroup @ref="_checkboxGroup" @bind-Value="_value1" DisplayInline="true" DisplayMode="DisplayModes.DefaultButton">
        <MagicPropsComponents.Components.CheckboxGroup.MPCheckboxOption ButtonClass=" ToggoleButtonClasses.OutlineDanger" Value="Test1" Description="Test 1 Desc"></MagicPropsComponents.Components.CheckboxGroup.MPCheckboxOption>
        <MagicPropsComponents.Components.CheckboxGroup.MPCheckboxOption ButtonClass=" ToggoleButtonClasses.Warning" Value="Test2" Description="Test 2 Desc"></MagicPropsComponents.Components.CheckboxGroup.MPCheckboxOption>
        <MagicPropsComponents.Components.CheckboxGroup.MPCheckboxOption ButtonClass=" ToggoleButtonClasses.Dark" Value="Test3" Description="Test 3 Desc"></MagicPropsComponents.Components.CheckboxGroup.MPCheckboxOption>
        <MagicPropsComponents.Components.CheckboxGroup.MPCheckboxOption Value="Test4" Description="Test 4 Desc"></MagicPropsComponents.Components.CheckboxGroup.MPCheckboxOption>
    </MagicPropsComponents.Components.CheckboxGroup.MPCheckboxGroup>
</div>
<hr/>
<div>
    <span style="font-weight:bold;">Checkboxes displayed vertically with toggle button</span>
    <br />
    <span style="padding-right:10px;"> Selected Value: @_value2</span>
    <br />
    <MagicPropsComponents.Components.CheckboxGroup.MPCheckboxGroup @ref="_checkboxGroup" @bind-Value="_value2" DisplayInline="false" DisplayMode="DisplayModes.ToggoleButton">
        <MagicPropsComponents.Components.CheckboxGroup.MPCheckboxOption ButtonClass=" ToggoleButtonClasses.OutlineDanger" Value="Test1" Description="Test 1 Desc"></MagicPropsComponents.Components.CheckboxGroup.MPCheckboxOption>
        <MagicPropsComponents.Components.CheckboxGroup.MPCheckboxOption ButtonClass=" ToggoleButtonClasses.Warning" Value="Test2" Description="Test 2 Desc"></MagicPropsComponents.Components.CheckboxGroup.MPCheckboxOption>
        <MagicPropsComponents.Components.CheckboxGroup.MPCheckboxOption ButtonClass=" ToggoleButtonClasses.Dark" Value="Test3" Description="Test 3 Desc"></MagicPropsComponents.Components.CheckboxGroup.MPCheckboxOption>
        <MagicPropsComponents.Components.CheckboxGroup.MPCheckboxOption Value="Test4" Description="Test 4 Desc"></MagicPropsComponents.Components.CheckboxGroup.MPCheckboxOption>
    </MagicPropsComponents.Components.CheckboxGroup.MPCheckboxGroup>
</div>
<hr />
<div>
    <span style="font-weight:bold;">Checkboxes displayed horizontally with switch button</span>
    <br />
    <span style="padding-right:10px;"> Selected Value: @_value3</span>
    <br />
    <MagicPropsComponents.Components.CheckboxGroup.MPCheckboxGroup @ref="_checkboxGroup" @bind-Value="_value3" DisplayInline="true" DisplayMode="DisplayModes.SwitchButton">
        <MagicPropsComponents.Components.CheckboxGroup.MPCheckboxOption ButtonClass=" ToggoleButtonClasses.OutlineDanger" Value="Test1" Description="Test 1 Desc"></MagicPropsComponents.Components.CheckboxGroup.MPCheckboxOption>
        <MagicPropsComponents.Components.CheckboxGroup.MPCheckboxOption ButtonClass=" ToggoleButtonClasses.Warning" Value="Test2" Description="Test 2 Desc"></MagicPropsComponents.Components.CheckboxGroup.MPCheckboxOption>
        <MagicPropsComponents.Components.CheckboxGroup.MPCheckboxOption ButtonClass=" ToggoleButtonClasses.Dark" Value="Test3" Description="Test 3 Desc"></MagicPropsComponents.Components.CheckboxGroup.MPCheckboxOption>
        <MagicPropsComponents.Components.CheckboxGroup.MPCheckboxOption Value="Test4" Description="Test 4 Desc"></MagicPropsComponents.Components.CheckboxGroup.MPCheckboxOption>
    </MagicPropsComponents.Components.CheckboxGroup.MPCheckboxGroup>
</div>
<hr />
<div>
    <span style="font-weight:bold;">Single Active Checkbox</span>
    <br />
    <MagicPropsComponents.Components.CheckboxGroup.MPCheckboxGroup @ref="_checkboxGroup" @bind-Value="_value4" DisplayInline="true" DisplayMode="DisplayModes.DefaultButton">
      <MagicPropsComponents.Components.CheckboxGroup.MPCheckboxOption Value="Test1" Description="This is active test"></MagicPropsComponents.Components.CheckboxGroup.MPCheckboxOption>
    </MagicPropsComponents.Components.CheckboxGroup.MPCheckboxGroup>
</div>
<hr />
<div>
    <span style="font-weight:bold;">Single Inactive Checkbox</span>
    <br />
    <MagicPropsComponents.Components.CheckboxGroup.MPCheckboxGroup @ref="_checkboxGroup" @bind-Value="_value5" DisplayInline="true" DisplayMode="DisplayModes.SwitchButton">
        <MagicPropsComponents.Components.CheckboxGroup.MPCheckboxOption Value="Test1" Description="This is inactive test" Disabled="true"></MagicPropsComponents.Components.CheckboxGroup.MPCheckboxOption>
    </MagicPropsComponents.Components.CheckboxGroup.MPCheckboxGroup>
</div>
<br />
<hr />
<h4>Validation with Blazor EditForm</h4>
@* use blazor EditForm: Should declare ValidationFieldName,then MPCheckboxGroup will catch correct invalid field.*@
<EditForm Model="test" OnValidSubmit="HandleValidSubmit" OnInvalidSubmit="HandleInValidSubmit">
    <DataAnnotationsValidator />  
    <MPCheckboxGroup Value="@(test.AgreeUserTerms?"True":"")" DisplayMode="DisplayModes.DefaultButton" ValidationFieldName="AgreeUserTerms" ValueChanged="@((val)=>{test.AgreeUserTerms=Convert.ToBoolean(string.IsNullOrEmpty(val)?"False":val); })">
        <div class="d-flex">
            <MPCheckboxOption Value="True"></MPCheckboxOption><a href="#">User Terms</a>
        </div>
    </MPCheckboxGroup>
    <ValidationMessage For="@(() => test.AgreeUserTerms)" />
    <MPCheckboxGroup DisplayInline DisplayMode="DisplayModes.DefaultButton" Datasource="tipds" Value="@string.Join(",",test.Tips)" ValidationFieldName="Tips" ValueChanged="@(val => HandleTipsChanges(val))" />
    <ValidationMessage For="@(() => test.Tips)" />
     <br />
    <button class="btn btn-primary mt-2" type="submit">Submit</button>
</EditForm>

@if (_status != null)
{
    <span style="@(_status==true?"color:green;":"color:red;")">@(_status == true ? "Submit!!" : "Failed!!")</span>
}
<hr />

@code {
    private MagicPropsComponents.Components.CheckboxGroup.MPCheckboxGroup _checkboxGroup;
    private string _value1 { get; set; } = "Test1,Test2";
    private string _value2 { get; set; } = "Test1,Test2";
    private string _value3 { get; set; } = "Test1,Test2";
    private string _value4 { get; set; } = "Test1";
    private string _value5 { get; set; } = "Test1";

    //validation Part
    protected override void OnInitialized()
    {
        tipds.Add("aaa", "aaa");
        tipds.Add("bbb", "bbb");
        tipds.Add("ccc", "ccc");
        tipds.Add("ddd", "ddd");
    }
    private TestClass test = new TestClass();
    private Dictionary<string, string> tipds = new Dictionary<string, string>();
    private bool? _status = null;
    private void HandleValidSubmit()
    {
        _status = true;
    }
    private void HandleInValidSubmit()
    {
        _status = false;
    }

    private void HandleTipsChanges(string val)
    {
        if (!string.IsNullOrEmpty(val))
        {
            test.Tips = val.Split(",").ToList();
        }
        else
        {
            test.Tips = new List<string>();
        }
    }
    private class TestClass
    {
        [MustBeTrue(ErrorMessage = "You must agree to the user terms.")]
        public bool AgreeUserTerms { get; set; }

        [MinLength(2, ErrorMessage = "Please select at least two options.")]
        public List<string> Tips { get; set; } = new List<string>();
    }

    public class MustBeTrueAttribute : ValidationAttribute
    {
        protected override ValidationResult IsValid(object value, ValidationContext validationContext)
        {
            if (value is bool boolValue && !boolValue)
            {
                return new ValidationResult(ErrorMessage ?? "This field must be true.", new[] { validationContext.MemberName });
            }
            return ValidationResult.Success;
        }
    }
}
