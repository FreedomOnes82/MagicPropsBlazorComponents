@using MagicPropsComponents.Abstractions.DataGrid
@using MagicPropsComponents.ViewModels.DataGrid;
@using MagicPropsComponents.ViewModels.Modal
@using Microsoft.JSInterop
@using System.Text.RegularExpressions;
@using MagicPropsComponents.Utilities
@using MagicPropsComponents.ViewModels.Shared;
@implements IMPDataGrid;
@inject IJSRuntime JSRuntime;
<CascadingValue Value="this" Name="MPDataGrid">
    <GridToolbar Width="Width" OnClickAdd="BeginAdd" OperationSettings="@OperationSettings" OnClickUpdate="HandleClickUpdate" OnClickEdit="BeginEdit" OnClickDelete="BeginDelete" OnClickCancel="HandleCancel" OnSearch="Search" @ref="@_toolbar" CustomToolBtns="@CustomToolBtns" ColumnChooserText="@ColumnChooserText" OnChangeColumns="OnColumnVisibleChanged" />
    <div class="row p-0" style="@_widthStyle">
        <div class="col-12 data-grid_wrapper p-0">
            <div @ref="_headerDiv">
                <div class="mp-datagrid-header-wrapper">
                    <table style="width:100%" class="mp-datagrid-header">
                        <colgroup>
                            <CascadingValue Value="true" Name="IsColGroup">
                                @ChildContent
                            </CascadingValue>
                        </colgroup>
                        <tr>
                            <CascadingValue Value="true" Name="IsHeaderRow">
                                @ChildContent
                            </CascadingValue>
                        </tr>
                    </table>
                </div>
            </div>

            <div class="mp-datagrid-body-wraper" @ref="_bodyDiv" style="@GetDataContainerHeightStyle()">
                <table style="width:100%" class="mp-datagrid">
                    <colgroup>
                        <CascadingValue Value="true" Name="IsColGroup">
                            @ChildContent
                        </CascadingValue>
                    </colgroup>
                    <tbody>
                        @if (_onInserting)
                        {
                            <CascadingValue Value="@NewData" Name="NewData">
                                <CascadingValue Value="_onInserting" Name="IsInserting">
                                    @if (EditMode == EditMode.Default)
                                    {
                                        <tr data-rowIdx="0">@ChildContent</tr>
                                    }
                                </CascadingValue>
                            </CascadingValue>
                        }
                        @if (GetCurrentDataSource().Count < 1)
                        {
                            <tr data-rowidx="0">
                                <td colspan="@(DisplayedColumns.Count==0 ? _columns.Count:DisplayedColumns.Count)">
                                    @if (NoDataTemplate != null)
                                    {
                                        @NoDataTemplate
                                    }
                                    else
                                    {
                                        <span class="mp-datagrid-body-empty">@NoDataText</span>
                                    }
                                </td>
                            </tr>
                        }
                        else
                        {
                            @foreach (var row in GetCurrentDataSource())
                            {
                                <CascadingValue Value="OperationSettings" Name="EditingSettings">
                                    <CascadingValue Value="false" Name="IsHeaderRow">
                                        <CascadingValue Value="row" Name="RowData">
                                            <CascadingValue Value="@(row!=null&&CheckIsSelected(row))" Name="IsSelected">
                                                <CascadingValue Value="@(row!=null&&row.Equals(_editRow))" Name="IsEditing">
                                                        @if (OperationSettings.EditingTrigger.Equals(EditingTrigger.RowClick))
                                                        {
                                                            <tr @onclick="()=>RowClickOnClickToEdit(row)" data-rowIdx="0">
                                                                @ChildContent
                                                            </tr>
                                                        }
                                                        else
                                                            if (OperationSettings.EditingTrigger.Equals(EditingTrigger.RowDblClick))
                                                        {
                                                            <tr @onclick="()=>RowClickOnDblClickToEdit(row)" data-rowIdx="0">
                                                                @ChildContent
                                                            </tr>
                                                        }
                                                </CascadingValue>
                                            </CascadingValue>
                                        </CascadingValue>
                                    </CascadingValue>
                                </CascadingValue>
                            }
                        }

                    </tbody>

                </table>

            </div>
            @*   <div class="mp-datagrid-without-pager"></div>*@
            @if (PaginationSettings.EnablePagination)
            {
                <div class="mp-datagrid-pager">
                    <MagicPropsComponents.Components.Pager.MPPager TotalCount="@_recordsTotal" PageIndex="@CurrentPageIndex" PageIndexChanged="IndexChanged" PageSize="@PaginationSettings.PageSize" />
                </div>
            }
            else
            {
                <div class="mp-datagrid-without-pager"></div>
            }
        </div>
    </div>

    <DialogEditor @ref=_dialogEditor Title="@(_onInserting?"New Record":"Edit Record")" Columns="@_columns" EditDialogTemplate="@EditDialogTemplate" OnCancel="HandleCancel" OnSave="HandleClickUpdate"></DialogEditor>

    <MagicPropsComponents.Components.Modal.MPModal @bind-Visible="_showDeleteModal" Title="Delete Record" FooterBottons="_deleteModalButtons" OnModalButtonClicked="OnClickDeleteModalBtn">
        <BodyTemplate>
            @if (DeleteDialogTemplate == null)
            {
                <span>Are you sure you want to delete this record?</span>
            }
            else
            {
                @DeleteDialogTemplate(SelectedRow)
            }
        </BodyTemplate>
    </MagicPropsComponents.Components.Modal.MPModal>

</CascadingValue>
@code {
    [Parameter]
    public int? Width { get; set; }
    [Parameter]
    public int? Height { get; set; }
    [Parameter]
    public bool CaseSensitive { get; set; } = false;
    [Parameter]
    public string ColumnChooserText { get; set; } = string.Empty;
    [Parameter]
    public List<ToolButton> CustomToolBtns { get; set; } = new List<ToolButton>();
    [Parameter]
    public RenderFragment ChildContent { get; set; }
    [Parameter]
    public RenderFragment? NoDataTemplate { get; set; }
    [Parameter]
    public string NoDataText { get; set; } = "There is no data...";
    [Parameter]
    public IEnumerable<object> Datasource
    {
        get => _datasource;
        set
        {
            if (!object.Equals(value, _datasource))
            {
                _datasource = value;
            }
        }
    }
    [Parameter]
    public OperationSettings OperationSettings { get; set; } = new OperationSettings();
    [Parameter]
    public EditMode EditMode { get; set; } = EditMode.Default;
    [Parameter]
    public PaginationSettings PaginationSettings { get; set; } = new PaginationSettings() { EnablePagination = false };
    [Parameter]
    public EventCallback<object> OnDeleteRowData { get; set; }
    [Parameter]
    public EventCallback<object> OnUpdateRowData { get; set; }
    [Parameter]
    public EventCallback<object> OnAddRowData { get; set; }
    [Parameter]
    public object SelectedRow { get => _selectedRow; set { _selectedRow = value; } }
    [Parameter]
    public EventCallback<object> SelectedRowChanged { get; set; }
    [Parameter]
    public int RecordsTotal { get; set; }//for server mode data fetch
    [Parameter]
    public int CurrentPageIndex { get; set; } = 1;
    [Parameter]
    public EventCallback<int> CurrentPageIndexChanged { get; set; }
    [Parameter]
    public EventCallback<SearchOption> OnDataRetrieving { get; set; }//for server mode data fetch
    [Parameter]
    public RenderFragment<object>? EditDialogTemplate { get; set; }
    [Parameter]
    public RenderFragment<object>? DeleteDialogTemplate { get; set; }

    private Dictionary<string, SortType> _sortFields = new Dictionary<string, SortType>();
    private string globalKeywords { get; set; } = string.Empty;
    private Dictionary<string, FilterOption> _filterFields = new Dictionary<string, FilterOption>();

    public object SampleData { get; set; } = null;
    public object NewData { get; set; } = null;
    public object EditRowClone { get; set; } = null;
    public bool HasEditingError { get { return EditMode == EditMode.Default && _validationErrors.Count > 0; } }
    public List<IMPGridColumn> DisplayedColumns
    {
        get => displayColums;
        set
        {
            if (displayColums != value)
            {
                displayColums = value;
                StateHasChanged();
            }
        }
    }
    public bool HasEditError { get; set; } = false;


    private ElementReference _headerDiv;
    private ElementReference _bodyDiv;
    private string _widthStyle { get => Width != null ? "width:" + Width + "px;" : "width:auto;"; }
    private string GetDataContainerHeightStyle()
    {
        if (Height == null) return "height:auto;";
        var toolbarHeight = ShowToolbar() ? 45 : 0;
        var headerHeight = 50;
        var pagerHeight = PaginationSettings.EnablePagination ? 50 : 0;
        var height = Height < 300 ? 300 : Height;
        return "height:" + (height - toolbarHeight - headerHeight - pagerHeight) + "px";
    }
    public bool ShowToolbar()
    {
        if (OperationSettings == null) return false;
        return OperationSettings.AllowAdding ||
        (OperationSettings.EditingTrigger == EditingTrigger.RowDblClick && (OperationSettings.AllowEditing || OperationSettings.AllowDeleting))
        || OperationSettings.AllowGlobalSearch
        || OperationSettings.ShowColumnChooser
        || CustomToolBtns.Count > 0;
    }

    private IEnumerable<object> _datasource = Array.Empty<object>();
    private object _selectedRow { get; set; } = null;
    private DialogEditor _dialogEditor;
    private object _editRow { get; set; } = null;
    private bool _onInserting = false;
    private DateTime? lastClickTime = null;
    private const double DoubleClickInterval = 0.3;
    private List<object> _objectsOfCurrentPage { get; set; } = new List<object>();
    private int _recordsTotal;
    private Type itemType { get; set; }
    private PropertyByLambda[]? _primaryProps { get; set; }
    private GridToolbar _toolbar;
    private List<IMPGridColumn> _columns { get; set; } = new List<IMPGridColumn>();
    private List<IMPGridColumn> _primaryColumns { get; set; } = new List<IMPGridColumn>();
    private List<IMPGridColumn> displayColums = new List<IMPGridColumn>();
    private List<string> _validationErrors = new List<string>();
    private bool _showDeleteModal = false;
    private List<ModalButton> _deleteModalButtons = new List<ModalButton>()
    {
        new ModalButton() { CssClass = "btn btn-primary", DismissModal = false, Text = "Confirm" },
        new ModalButton(){ CssClass = "btn btn-secondary", DismissModal = true, Text = "Cancel" }
    };
    private void OnClickDeleteModalBtn(ModalButton button)
    {
        if (button.Text == "Confirm")
        {
            HandleDeleteRow();
        }
    }

    protected override void OnInitialized()
    {
        itemType = Datasource.GetType().GenericTypeArguments[0];
        SampleData = Activator.CreateInstance(itemType);
        RenderData();
    }
    #region ClickTrigger
    private void RowClickOnClickToEdit(object row)
    {
        _onInserting = false;
        NewData = null;
        if (!HasEditingError)
        {
            if (EditMode == EditMode.Default)
            {
                SelectedRow = null;
                SelectedRowChanged.InvokeAsync(SelectedRow);
                if (OperationSettings!.AllowEditing)
                {
                    if (!row.Equals(_editRow))
                    {
                        _editRow = row;
                        EditRowClone = ValueConverter.CloneObject(_editRow);
                    }
                }
            }
            else if (EditMode == EditMode.Dialog)
            {
                SelectedRow = row;
                SelectedRowChanged.InvokeAsync(SelectedRow);
                if (OperationSettings!.AllowEditing)
                {
                    _editRow = row;
                    EditRowClone = ValueConverter.CloneObject(_editRow);
                    _dialogEditor.ShowDialog(EditRowClone);
                }
            }
        }
    }

    private void RowClickOnDblClickToEdit(object row)
    {
        _onInserting = false;
        NewData = null;
        var currentTime = DateTime.Now;
        if (lastClickTime.HasValue && (currentTime - lastClickTime.Value).TotalSeconds < DoubleClickInterval)
        {//dbl click
            if (!HasEditingError)
            {
                if (EditMode == EditMode.Default)
                {
                    SelectedRow = null;
                    SelectedRowChanged.InvokeAsync(SelectedRow);
                    if (OperationSettings!.AllowEditing)
                    {
                        _editRow = row;
                        EditRowClone = ValueConverter.CloneObject(_editRow);
                    }
                }
                else if (EditMode == EditMode.Dialog)
                {
                    SelectedRow = row;
                    SelectedRowChanged.InvokeAsync(SelectedRow);
                    if (OperationSettings!.AllowEditing)
                    {
                        _editRow = row;
                        EditRowClone = ValueConverter.CloneObject(_editRow);
                        _dialogEditor.ShowDialog(EditRowClone);
                    }
                }
            }
        }
        else if (!HasEditingError)
        {//click
            if (row.Equals(SelectedRow))
            {
                SelectedRow = null;
                SelectedRowChanged.InvokeAsync(SelectedRow);
            }
            else if (row.Equals(_editRow))
            {
                return;
            }
            else
            {
                SelectedRow = row;
                SelectedRowChanged.InvokeAsync(SelectedRow);
                _editRow = null;
                EditRowClone = null;
            }
        }
        lastClickTime = currentTime;
    }
    #endregion ClickTrigger

    #region SimpleDataAction
    private void BeginAdd()
    {
        if (!OperationSettings!.AllowAdding) return;
        NewData = Activator.CreateInstance(itemType);
        _editRow = null;
        SelectedRow = null;
        SelectedRowChanged.InvokeAsync(SelectedRow);
        if (itemType != null)
        {
            var props = PropertyByLambda.GetProperties(NewData!.GetType());
            foreach (var p in props)
            {
                if (p.Info.PropertyType == typeof(System.DateTime))
                {
                    p.SetValue(NewData, DateTime.Now);
                }
                else if (p.Info.PropertyType == typeof(System.Decimal))
                {
                    p.SetValue(NewData, 1m);
                }
                else if (p.Info.PropertyType == typeof(System.Int32))
                {
                    p.SetValue(NewData, 1);
                }
                else if (p.Info.PropertyType == typeof(System.Int64))
                {
                    p.SetValue(NewData, 1L);
                }
            }
        }
        _onInserting = true;
        if (EditMode == EditMode.Dialog)
        {
            _dialogEditor.ShowDialog(NewData);
        }
        StateHasChanged();
    }

    private void BeginEdit()
    {
        _onInserting = false;
        NewData = null;
        if (EditMode == EditMode.Default && OperationSettings!.AllowEditing)
        {
            _editRow = SelectedRow;
            EditRowClone = ValueConverter.CloneObject(_editRow);
            SelectedRow = null;
            SelectedRowChanged.InvokeAsync(SelectedRow);
        }
        else
        {
            if (OperationSettings!.AllowEditing)
            {
                _editRow = SelectedRow;
                EditRowClone = ValueConverter.CloneObject(_editRow);
                _dialogEditor.ShowDialog(EditRowClone);
                SelectedRow = null;
                SelectedRowChanged.InvokeAsync(SelectedRow);
            }
        }
    }

    private void BeginDelete()
    {
        if (!OperationSettings!.AllowDeleting || (SelectedRow == null && _editRow == null)) return;
        _showDeleteModal = true;
    }

    private void HandleAddRow(object data)
    {
        if (!HasEditingError)
        {
            if (EditMode == EditMode.Dialog)
            {
                _dialogEditor.HideDialog();
            }
            _onInserting = false;
            NewData = null;
            if (OnAddRowData.HasDelegate)
            {
                OnAddRowData.InvokeAsync(data);
                _recordsTotal = RecordsTotal;
                RenderData();
                return;
            }
            Datasource = Datasource.Append(data);
            RenderData();
            _dialogEditor.HideDialog();
        }
    }

    private void HandleUpdateRow(object newRow)
    {
        if (OnUpdateRowData.HasDelegate)
        {
            OnUpdateRowData.InvokeAsync(newRow);
            if (EditMode == EditMode.Dialog)
            {
                _dialogEditor.HideDialog();
            }
            _editRow = null;
            _recordsTotal = RecordsTotal;
            EditRowClone = null;
            return;
        }
        if (!HasEditingError)
        {
            var updatedDatasource = Datasource.Select(x => x == _editRow ? newRow : x).ToList();
            Datasource = updatedDatasource;
            RenderData();
            if (EditMode == EditMode.Dialog)
            {
                SelectedRow = newRow;
                SelectedRowChanged.InvokeAsync(SelectedRow);
                _editRow = null;
                _dialogEditor.HideDialog();
            }
            else if (EditMode == EditMode.Default)
            {
                _editRow = null;
                SelectedRow = null;
                SelectedRowChanged.InvokeAsync(SelectedRow);
            }
            EditRowClone = null;
            StateHasChanged();
        }
    }

    private void HandleDeleteRow()
    {
        if (SelectedRow != null)
        {
            Datasource = Datasource.Where(x => x != SelectedRow).ToList();
            OnDeleteRowData.InvokeAsync(SelectedRow);
        }
        else if (_editRow != null)
        {
            Datasource = Datasource.Where(x => x != _editRow).ToList();
            OnDeleteRowData.InvokeAsync(_editRow);
        }
        _showDeleteModal = false;
        RenderData();
        SelectedRow = null;
        StateHasChanged();
    }

    private void HandleCancel()
    {
        if (_onInserting)
        {
            _onInserting = false;
            NewData = null;
        }
        else
        {
            _editRow = null;
            EditRowClone = null;
        }
        _validationErrors.Clear();
        _dialogEditor.HideDialog();
        RenderData();
    }

    private void HandleClickUpdate()
    {
        if (_onInserting && NewData != null)
        {
            HandleAddRow(NewData);
        }
        else if (EditRowClone != null)
        {
            HandleUpdateRow(EditRowClone);
        }
    }

    public void AddValidationErrorField(string columnName)
    {
        if (!_validationErrors.Contains(columnName))
            _validationErrors.Add(columnName);
    }

    public void RemoveValidationErrorField(string columnName)
    {
        if (_validationErrors.Contains(columnName))
            _validationErrors.Remove(columnName);
    }
    #endregion SimpleDataAction


    private void RenderData()
    {
        if (PaginationSettings.EnablePagination && PaginationSettings.PaginationMode == PaginationModes.ServerSide)
        {
            _recordsTotal = RecordsTotal;
            var searchOption = new SearchOption
                {
                    PageIndex = CurrentPageIndex,
                    PageSize = PaginationSettings.PageSize,
                    Keyword = globalKeywords,
                    SortFields = _sortFields,
                    FilterFields = _filterFields
                };
            OnDataRetrieving.InvokeAsync(searchOption);
            StateHasChanged();
            return;
        }

        List<object> data = Datasource.ToList();
        //about sort-----------------------
        if (_sortFields.Count > 0)
        {
            var props = PropertyByLambda.GetProperties(itemType);
            IOrderedEnumerable<object> orderedData = null;
            var ltSortFields = _sortFields.ToList();
            for (var i = 0; i < ltSortFields.Count; i++)
            {
                var prop = props.First(x => x.Name == ltSortFields[i].Key);
                Func<object, object> getFunc = s => (prop.GetValue(s))!;
                switch (ltSortFields[i].Value)
                {
                    case SortType.Ascending:
                        {
                            if (i == 0)
                            {
                                orderedData = Datasource.OrderBy(getFunc);
                            }
                            else
                            {
                                orderedData = orderedData!.ThenBy(getFunc);
                            }
                        }
                        break;
                    case SortType.Descending:
                        {
                            if (i == 0)
                            {
                                orderedData = Datasource.OrderByDescending(getFunc);
                            }
                            else
                            {
                                orderedData = orderedData!.ThenByDescending(getFunc);
                            }
                        }
                        break;
                }
            }
            data = orderedData == null ? data : orderedData.ToList();
        }
        //about filter----------------------
        if (_filterFields.Count > 0)
        {
            var props = PropertyByLambda.GetProperties(itemType);
            List<object> filteredData = null;
            var ltFilterFields = _filterFields.ToList();
            for (var i = 0; i < ltFilterFields.Count; i++)
            {
                var prop = props.First(x => x.Name == ltFilterFields[i].Key);
                if (i == 0)
                {
                    filteredData = Datasource.Where(x => CheckIsMatch(prop.GetValue(x), ltFilterFields[i].Value)).ToList();
                }
                else
                {
                    filteredData = filteredData!.Where(x => CheckIsMatch(prop.GetValue(x), ltFilterFields[i].Value)).ToList();
                }
            }
            data = filteredData == null ? data : filteredData.ToList();
        }
        //about search--------------------
        if (!string.IsNullOrEmpty(globalKeywords))
        {
            var props = PropertyByLambda.GetProperties(itemType);
            data = data.Where(obj =>
                {
                    foreach (var property in props)
                    {
                        var value = property.GetValue(obj)?.ToString();
                        if (!string.IsNullOrEmpty(value) && (!CaseSensitive && value.ToLower().Contains(globalKeywords.ToLower()) || (CaseSensitive && value.Contains(globalKeywords))))
                            return true;
                    }
                    return false;
                }).ToList();
        }
        //about pagenation---------------
        if (!PaginationSettings.EnablePagination)
        {
            _objectsOfCurrentPage = data.ToList();
        }
        else
        {
            if (PaginationSettings.PaginationMode == PaginationModes.ClientSide)
            {
                _recordsTotal = data.Count;
                _objectsOfCurrentPage = data.Skip((CurrentPageIndex - 1) * PaginationSettings.PageSize).Take(PaginationSettings.PageSize).ToList();
            }
        }
        StateHasChanged();
    }

    private void IndexChanged(int index)
    {
        CurrentPageIndex = index;
        RenderData();
    }

    private List<object> GetCurrentDataSource()
    {
        if (PaginationSettings.EnablePagination && PaginationSettings.PaginationMode == PaginationModes.ServerSide)
        {
            return Datasource.ToList();
        }

        return _objectsOfCurrentPage;
    }

    #region Column
    private void OnColumnVisibleChanged(IList<IMPGridColumn> columns)
    {
        DisplayedColumns = columns.Where(x => x.Visible).ToList();
        StateHasChanged();
    }

    public void AddColumn(IMPGridColumn column)
    {
        _columns.Add(column);
    }
    #endregion Column

    public void SortData(string columnName, SortType sortType)
    {
        if (_sortFields.ContainsKey(columnName))
        {
            if (sortType == SortType.None)
            {
                _sortFields.Remove(columnName);
            }
            else
            {
                _sortFields[columnName] = sortType;
            }
        }
        else
        {
            if (sortType != SortType.None)
            {
                _sortFields.Add(columnName, sortType);
            }
        }
        RenderData();
        CurrentPageIndex = 1;
        StateHasChanged();
    }

    private void Search(string keywords)
    {
        globalKeywords = keywords;
        RenderData();
        CurrentPageIndex = 1;
        StateHasChanged();
    }

    public bool CheckIsFiltered(string columnName)
    {
        return _filterFields.ContainsKey(columnName);
    }

    public void AddFilter(string columnName, FilterOption filterCondition)
    {
        if (_filterFields.ContainsKey(columnName))
        {
            _filterFields[columnName] = filterCondition;
        }
        else
        {
            _filterFields.Add(columnName, filterCondition);
        }
        CurrentPageIndex = 1;
        RenderData();
        StateHasChanged();
    }
    public void RemoveFilter(string columnName)
    {
        if (_filterFields.ContainsKey(columnName))
        {
            _filterFields.Remove(columnName);
        }
        CurrentPageIndex = 1;
        RenderData();
        StateHasChanged();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        JSRuntime.InvokeAsync<String>("MP_DATAGRID.init", _headerDiv, _bodyDiv);
        if (firstRender)
        {
            _toolbar.InitColumns(_columns);
            DisplayedColumns = _columns.Where(x => x.Visible).ToList();
            _primaryColumns = _columns.Where(x => x.PrimaryColumn).ToList();
            var primaryCol = _primaryColumns.Select(x => x.ColumnName);
            var props = PropertyByLambda.GetProperties(SampleData!.GetType());
            _primaryProps = props.Where(x => primaryCol.Contains(x.Name)).ToArray();
            if (SelectedRow != null)
            {
                StateHasChanged();
            }
        }
    }

    private string GetPrimaryString(object data)
    {
        string primaryString = string.Empty;
        if (_primaryProps != null)
        {
            foreach (var prop in _primaryProps)
            {
                primaryString += prop.GetValue(data);
            }
        }
        return primaryString;
    }

    private bool CheckIsSelected(object data)
    {
        if (SelectedRow != null && _primaryProps != null)
        {
            return GetPrimaryString(SelectedRow) == GetPrimaryString(data);
        }
        return false;
    }

    public List<object> GetDefaultMenuList(string columnName)//from current datasource, if server mode, please add CustomMenuListFilterDatasource for give column when its FilterType is MenuListFilter
    {
        var result = new List<object>();
        var props = PropertyByLambda.GetProperties(itemType);
        var prop = props.First(x => x.Name == columnName);
        Datasource.ToList().ForEach(x => result.Add(prop.GetValue(x)));
        return result.Distinct().ToList();
    }

    private bool CheckIsMatch(object value, FilterOption option)
    {
        switch (option.FilterType)
        {
            case FilterType.MenuListFilter:
                {
                    return option!.MenuList!.Contains(value);
                }
            case FilterType.ConditionFilter:
                {
                    switch (option.ColumnType)
                    {
                        case ColumnType.Default:
                            if (option.ConditionFilterSettings == null || option.ConditionFilterSettings.StingFilterBy == null) return true;
                            switch (option.ConditionFilterSettings.StingFilterBy)
                            {
                                case StringColumnTypeFilterBy.Empty: return value == null;
                                case StringColumnTypeFilterBy.NotEmpty: return value != null;
                            }
                            if (value is string _stringValue)
                            {
                                var _keyValue = option.ConditionFilterSettings.Keywords ?? string.Empty;
                                if (!CaseSensitive)
                                {
                                    _stringValue = _stringValue.ToLower();
                                    _keyValue = _keyValue.ToLower();
                                }
                                switch (option.ConditionFilterSettings.StingFilterBy)
                                {
                                    case StringColumnTypeFilterBy.StartsWith: return !string.IsNullOrEmpty(_keyValue) && _stringValue.StartsWith(_keyValue);
                                    case StringColumnTypeFilterBy.DoesNotStartWith: return !string.IsNullOrEmpty(_keyValue) && !_stringValue.StartsWith(_keyValue);
                                    case StringColumnTypeFilterBy.EndsWith: return !string.IsNullOrEmpty(_keyValue) && _stringValue.EndsWith(_keyValue);
                                    case StringColumnTypeFilterBy.DoesNotEndWith: return !string.IsNullOrEmpty(_keyValue) && !_stringValue.EndsWith(_keyValue);
                                    case StringColumnTypeFilterBy.Contains: return !string.IsNullOrEmpty(_keyValue) && _stringValue.Contains(_keyValue);
                                    case StringColumnTypeFilterBy.DoesNotContain: return !string.IsNullOrEmpty(_keyValue) && !_stringValue.Contains(_keyValue);
                                    case StringColumnTypeFilterBy.Equal: return _stringValue.Equals(_keyValue);
                                    case StringColumnTypeFilterBy.NotEqual: return !_stringValue.Equals(_keyValue);
                                    case StringColumnTypeFilterBy.RegularMatching: return !string.IsNullOrEmpty(_keyValue) && Regex.IsMatch(_stringValue, _keyValue);
                                }
                            }
                            return true;
                        case ColumnType.Number:
                            if (option.ConditionFilterSettings == null || option.ConditionFilterSettings.OtherFilterBy == null) return true;
                            switch (option.ConditionFilterSettings.OtherFilterBy)
                            {
                                case OtherColumnTypeFilterBy.Null: return value == null;
                                case OtherColumnTypeFilterBy.NotNull: return value != null;
                            }
                            //Console.WriteLine(value?.GetType());
                            var _numValue = Convert.ToDecimal(value);
                            if (option.ConditionFilterSettings.KeyValue is decimal _numKeyValue)
                            {
                                switch (option.ConditionFilterSettings.OtherFilterBy)
                                {
                                    case OtherColumnTypeFilterBy.Equal: return _numKeyValue == _numValue;
                                    case OtherColumnTypeFilterBy.NotEqual: return _numKeyValue != _numValue;
                                    case OtherColumnTypeFilterBy.GreaterThan: return _numValue > _numKeyValue;
                                    case OtherColumnTypeFilterBy.GreaterThanOrEqual: return _numValue >= _numKeyValue;
                                    case OtherColumnTypeFilterBy.LessThan: return _numValue < _numKeyValue;
                                    case OtherColumnTypeFilterBy.LessThanOrEqual: return _numValue <= _numKeyValue;
                                }
                            }
                            else
                            {
                                try
                                {
                                    decimal numKeyValue = Convert.ToDecimal(option.ConditionFilterSettings.KeyValue?.ToString());
                                    switch (option.ConditionFilterSettings.OtherFilterBy)
                                    {
                                        case OtherColumnTypeFilterBy.Equal: return numKeyValue == _numValue;
                                        case OtherColumnTypeFilterBy.NotEqual: return numKeyValue != _numValue;
                                        case OtherColumnTypeFilterBy.GreaterThan: return _numValue > numKeyValue;
                                        case OtherColumnTypeFilterBy.GreaterThanOrEqual: return _numValue >= numKeyValue;
                                        case OtherColumnTypeFilterBy.LessThan: return _numValue < numKeyValue;
                                        case OtherColumnTypeFilterBy.LessThanOrEqual: return _numValue <= numKeyValue;
                                    }
                                }
                                catch
                                {
                                    return true;
                                }
                            }
                            return true;
                        case ColumnType.Date:
                            if (option.ConditionFilterSettings == null || option.ConditionFilterSettings.OtherFilterBy == null) return true;
                            switch (option.ConditionFilterSettings.OtherFilterBy)
                            {
                                case OtherColumnTypeFilterBy.Null: return value == null;
                                case OtherColumnTypeFilterBy.NotNull: return value != null;
                            }
                            var _dateKeyValue = Convert.ToDateTime(option.ConditionFilterSettings.KeyValue?.ToString());
                            if (value is DateTime _dateValue)
                            {
                                switch (option.ConditionFilterSettings.OtherFilterBy)
                                {
                                    case OtherColumnTypeFilterBy.Equal: return _dateKeyValue == _dateValue;
                                    case OtherColumnTypeFilterBy.NotEqual: return _dateKeyValue != _dateValue;
                                    case OtherColumnTypeFilterBy.GreaterThan: return _dateValue > _dateKeyValue;
                                    case OtherColumnTypeFilterBy.GreaterThanOrEqual: return _dateValue >= _dateKeyValue;
                                    case OtherColumnTypeFilterBy.LessThan: return _dateValue < _dateKeyValue;
                                    case OtherColumnTypeFilterBy.LessThanOrEqual: return _dateValue <= _dateKeyValue;
                                }
                            }
                            else
                            {
                                try
                                {
                                    DateTime dateValue = Convert.ToDateTime(option.ConditionFilterSettings.KeyValue?.ToString());
                                    switch (option.ConditionFilterSettings.OtherFilterBy)
                                    {
                                        case OtherColumnTypeFilterBy.Equal: return _dateKeyValue == dateValue;
                                        case OtherColumnTypeFilterBy.NotEqual: return _dateKeyValue != dateValue;
                                        case OtherColumnTypeFilterBy.GreaterThan: return dateValue > _dateKeyValue;
                                        case OtherColumnTypeFilterBy.GreaterThanOrEqual: return dateValue >= _dateKeyValue;
                                        case OtherColumnTypeFilterBy.LessThan: return dateValue < _dateKeyValue;
                                        case OtherColumnTypeFilterBy.LessThanOrEqual: return dateValue <= _dateKeyValue;
                                    }
                                }
                                catch
                                {
                                    return true;
                                }
                            }
                            return true;
                        case ColumnType.Boolean:
                            if (option.ConditionFilterSettings == null || option.ConditionFilterSettings.KeyValue == null) return true;
                            var _boolKeyValue = Convert.ToBoolean(option.ConditionFilterSettings.KeyValue?.ToString());
                            {
                                if (value is bool _boolValue)
                                {
                                    return _boolKeyValue == _boolValue;
                                }
                                else
                                {
                                    try
                                    {
                                        bool boolValue = Convert.ToBoolean(value?.ToString());
                                        return _boolKeyValue == boolValue;
                                    }
                                    catch
                                    {
                                        return true;
                                    }
                                }
                            }
                        default: return true;
                    }
                }
            case FilterType.DefaultFilter:
            default:
                {
                    if (string.IsNullOrEmpty(value.ToString()) || string.IsNullOrEmpty(option.Keywords)) return true;
                    if (value is string _strValue)
                    {
                        if (CaseSensitive) return _strValue.IndexOf(option.Keywords) > -1;
                        else return _strValue.ToLower().IndexOf(option.Keywords.ToLower()) > -1;
                    }
                    else
                    {
                        try
                        {
                            string strValue = value?.ToString() ?? string.Empty;
                            if (string.IsNullOrEmpty(strValue)) return true;
                            if (CaseSensitive) return strValue.IndexOf(option.Keywords) > -1;
                            else return strValue.ToLower().IndexOf(option.Keywords.ToLower()) > -1;
                        }
                        catch
                        {
                            return true;
                        }
                    }
                }
        }
    }

}
