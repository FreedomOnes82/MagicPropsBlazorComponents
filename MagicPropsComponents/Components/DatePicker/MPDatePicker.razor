@using System.Globalization;
@using MagicPropsComponents.Abstractions
@using Microsoft.JSInterop;
@using Microsoft.AspNetCore.Components.Forms;
@using MagicPropsComponents.Utilities;
@typeparam TValue;
@implements IDisposable;
@implements IMPDatePicker;
@inject IJSRuntime JSRuntime;
<CascadingValue Value="this" Name="MPDatePicker">
    <div class="datePickerRoot">
        <div class="@(!string.IsNullOrEmpty(Title)?"mp-input-container":"")" id="@_datepickerTriggerId" @onfocusin="ShowCalendar" style="width:@(Width==null?"auto":Width<80?"80px":Width.ToString()+"px");">
            <div class="mp-input-outline  @(Disabled?"disabled":"") @(!Disabled&&!CheckIsValid()?"mp-input-err":"")" style="width:@(Width==null?"auto":Width<80?"80px":Width.ToString()+"px");margin-top: 15px;">
                @if (ReadOnly && Disabled)
                {
                    <input @ref="_txtSelectedDateStr" type="text" class="mp-within-input" value="@GetSelectedDateStr()" id="@InputID" readonly disabled>
                }
                else if (ReadOnly)
                {
                    <input @ref="_txtSelectedDateStr" type="text" class="mp-within-input" value="@GetSelectedDateStr()" id="@InputID" readonly>
                }
                else if (Disabled)
                {
                    <input @ref="_txtSelectedDateStr" type="text" class="mp-within-input" value="@GetSelectedDateStr()" id="@InputID" disabled>
                }
                else
                {
                    if (_showCalendar)
                    {
                        <input @ref="_txtSelectedDateStr" type="text" placeholder="@DateFormatString" class="mp-within-input" value="@GetSelectedDateStr()" @onchange="TextBoxSelectedDateChanged" id="@InputID">
                    }
                    else
                    {
                        <input @ref="_txtSelectedDateStr" type="text" placeholder="@DateFormatString" class="mp-within-input" value="@GetSelectedDateStr()" @onfocus="ShowCalendar" @onclick="ShowCalendar" id="@InputID">
                    }
                }
                <div class="mp-input-btn" @onclick="SwicthCalendarPopupVisible">
                    <span><i class="fa fa-calendar"></i></span>
                </div>
            </div>
            @if (!string.IsNullOrEmpty(Title))
            {
                <div class="mp-input-text @(CheckIsValid()?"":"mp-input-errmsg-hide") @(Disabled?"disabled":"")" style="display:@(FixedTitle||_showCalendar||!string.IsNullOrEmpty(GetSelectedDateStr())?"flex":"none")" for="@InputID">@Title</div>
            }
        </div>
        <div class="datepicker-popup" @ref="@_calendarModelEle">
            <div class="date-picker-container">
                <table style="width:300px;">
                    <thead>
                        <tr>
                            <th class="text-center" style="width:20%;cursor:pointer" @onclick="()=>GotoSelectorView(SelectorViews.MonthSelector)">
                                @GetMonthString(_showingMonth ?? 1)
                            </th>
                            <th class="text-center" style="width:60%;cursor:pointer" @onclick="()=>GotoSelectorView(SelectorViews.YearSelector)">
                                @_showingYear
                            </th>
                            <th>
                                <div class="btn btn-theme ms-2 py-1" @onclick="SelectToday">Today</div>
                            </th>
                        </tr>
                    </thead>
                </table>
                <div class="d-flex align-content-center pt-2">
                    <div style="height:240px;line-height:240px;width:15px;">
                        <div class="date-picker-btn @(CheckIsAllowPre()?"":"disabled")" @onclick="GoPre" @onclick:stopPropagation=true><i class="fa fa-chevron-left"></i></div>
                    </div>
                    @if (_currentSelectorView == SelectorViews.DateSelector)
                    {
                        <table style="width:280px;" class="my-2">
                            <colgroup>
                                <col width="40" />
                                <col width="40" />
                                <col width="40" />
                                <col width="40" />
                                <col width="40" />
                                <col width="40" />
                                <col width="40" />
                            </colgroup>
                            <tbody>
                                @if (!StartsWithMonday)
                                {
                                    <tr>
                                        <td style="height:40px;">Su</td>
                                        <td style="height:40px;">Mo</td>
                                        <td style="height:40px;">Tu</td>
                                        <td style="height:40px;">We</td>
                                        <td style="height:40px;">Th</td>
                                        <td style="height:40px;">Fr</td>
                                        <td style="height:40px;">Sa</td>
                                    </tr>
                                }
                                else
                                {
                                    <tr>
                                        <td style="height:40px;">Mo</td>
                                        <td style="height:40px;">Tu</td>
                                        <td style="height:40px;">We</td>
                                        <td style="height:40px;">Th</td>
                                        <td style="height:40px;">Fr</td>
                                        <td style="height:40px;">Sa</td>
                                        <td style="height:40px;">Su</td>
                                    </tr>
                                }
                                @while (true)
                                {
                                    <tr>
                                        @for (int i = 0; i < 7; i++)
                                        {
                                            <MPDateItem SelectedDate="_selectedDate" ShowingDate="_handlingDate" ShowingYear="_showingYear!.Value" ShowingMonth="_showingMonth!.Value" SelectedDateChanging="OnSelectedDateChanging"></MPDateItem>
                                            _handlingDate = _handlingDate.AddDays(1);
                                        }
                                    </tr>
                                    if (AnyDateOfNextWeekInSelectedMonth(_showingYear!.Value, _showingMonth!.Value) == false)
                                        break;
                                }

                            </tbody>
                        </table>
                    }

                    @if (_currentSelectorView == SelectorViews.MonthSelector)
                    {
                        <MPMonthSelector SelectedMonth="_showingMonth" ShowingYear="_showingYear!.Value" OnMonthSelected="MonthSelector_ChangeSelectedMonth"></MPMonthSelector>
                    }
                    @if (_currentSelectorView == SelectorViews.YearSelector)
                    {
                        <MPYearSelector @ref="_yearSelector" OnYearSelected="YearSelector_ChangeSelectedYear" ShowingYear="_showingYear" @bind-IsAllowGoNextYearPage="_isAllowGoNextYearPage" @bind-IsAllowGoPreYearPage="_isAllowGoPreYearPage"
                                        MaxDisplayYear="@DefaultDisplayedMaxYear" MinDisplayYear="@DefaultDisplayedMinYear" PageSize="@DefaultYearPageSize"></MPYearSelector>
                    }
                    <div style="height:240px;line-height:240px;width:15px;">
                        <div class="date-picker-btn ms-2 @(CheckIsAllowNext()?"":"disabled")" @onclick="GoNext" @onclick:stopPropagation=true><i class="fa fa-chevron-right"></i></div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</CascadingValue>

@code {
    [CascadingParameter]
    private EditContext? CurrentEditContext { get; set; }
    [Parameter]
    public bool StartsWithMonday { get; set; }
    [Parameter]
    public TValue Value { get; set; }
    [Parameter]
    public EventCallback<TValue> ValueChanged { get; set; }
    [Parameter]
    public bool FixedTitle { get; set; }
    [Parameter]
    public string Title { get; set; } = string.Empty;
    [Parameter]
    public string InputID { get; set; } = string.Empty;
    [Parameter]
    public bool ReadOnly { get; set; }
    [Parameter]
    public bool Disabled { get; set; }
    [Parameter]
    public int? Width { get; set; }
    [Parameter]
    public string? DateFormatString
    {
        get
        {
            if (string.IsNullOrEmpty(_dateFormatString))
            {
                CultureInfo currentCulture = CultureInfo.CurrentCulture;
                DateTimeFormatInfo dateTimeFormatInfo = currentCulture.DateTimeFormat;
                _dateFormatString = dateTimeFormatInfo.ShortDatePattern;
            }
            return _dateFormatString;

        }
        set { _dateFormatString = value; }
    }
    [Parameter]
    public DateTime Maximum { get; set; } = new DateTime(2099, 12, 31);
    [Parameter]
    public DateTime Minimum { get; set; } = new DateTime(1900, 1, 1);
    [Parameter]
    public string ValidationFieldName { get; set; } = string.Empty;//only used under EditForm


    private int DefaultDisplayedMinYear { get; set; } = 1900;
    private int DefaultDisplayedMaxYear { get; set; } = 2099;
    private int DefaultYearPageSize { get; set; } = 16;
    private DateTime _selectedDate = default;
    private bool _showCalendar { get; set; }
    private string? _dateFormatString = default;
    private int i = 0;
    private DateTime _handlingDate = default;
    private int? _showingYear = default;
    private int? _showingMonth = default;
    private ElementReference _txtSelectedDateStr;
    private MPYearSelector? _yearSelector = default;
    private bool _afterFirstFocus = false;

    private string _datepickerTriggerId { get; set; } = string.Empty;
    private SelectorViews _currentSelectorView = SelectorViews.DateSelector;

    private void InitDateViewOfMonth()
    {
        if (_showingYear == null || _showingMonth == null)
        {
            _showingYear = _selectedDate.Year;
            _showingMonth = _selectedDate.Month;
        }
        var firstDateOfMonth = new DateTime(_showingYear!.Value, _showingMonth!.Value, 1);
        var dayOfWeekOfFirstMonthDay = (int)firstDateOfMonth.DayOfWeek;
        DateTime destDate = default;
        if (_showingYear!.Value == DateTime.MinValue.Year)
        {
            _showingYear = DefaultDisplayedMinYear;
            firstDateOfMonth = new DateTime(_showingYear!.Value, _showingMonth!.Value, 1);
            dayOfWeekOfFirstMonthDay = (int)firstDateOfMonth.DayOfWeek;
        }

        if (!StartsWithMonday)
            destDate = firstDateOfMonth.AddDays(-1 * dayOfWeekOfFirstMonthDay);
        else
        {
            if (dayOfWeekOfFirstMonthDay == 0)
                destDate = firstDateOfMonth.AddDays(-6);
            else
                destDate = firstDateOfMonth.AddDays(-1 * (dayOfWeekOfFirstMonthDay - 1));
        }
        _handlingDate = destDate;
    }

    private bool AnyDateOfNextWeekInSelectedMonth(int year, int month)
    {
        return _handlingDate.Year == year && _handlingDate.Month == month;
    }

    private void InitValue()
    {
        if (typeof(TValue) == typeof(DateTime) || typeof(TValue) == typeof(DateTime?))
        {
            if (Value != null)
            {
                _selectedDate = Convert.ToDateTime(Value);
            }
            else
            {
                _selectedDate = Minimum;
            }
            if (_selectedDate > Maximum || _selectedDate < Minimum)
            {
                _selectedDate = Minimum;
            }
        }
        else
        {
            throw new Exception("Datepicker only accept types related to dates like 'DateTime?' or 'DateTime'.");
        }
        _showingYear = _selectedDate.Year;
        _showingMonth = _selectedDate.Month;
    }

    protected override void OnInitialized()
    {
        if (string.IsNullOrEmpty(InputID))
        {
            InputID = "input_" + Guid.NewGuid().ToString().Replace("-", "");
        }
        InitValue();

        if (CurrentEditContext != null)
        {
            CurrentEditContext.OnValidationStateChanged += HandleValidationStateChanged;
        }
    }

    protected override void OnParametersSet()
    {
        InitValue();
    }

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(_datepickerTriggerId)) _datepickerTriggerId = "datepicker_" + Guid.NewGuid().ToString().Replace("-", "");
        await JSRuntime.InvokeVoidAsync("registerDotNetMethod", _datepickerTriggerId, DotNetObjectReference.Create(this));
    }

    void IDisposable.Dispose()
    {
        if (CurrentEditContext != null)
        {
            CurrentEditContext.OnValidationStateChanged -= HandleValidationStateChanged;
        }
        JSRuntime.InvokeVoidAsync("releaseDotNetRef", _datepickerTriggerId);
    }

    private void HandleValidationStateChanged(object? sender, ValidationStateChangedEventArgs e)
    {
        StateHasChanged();
    }

    private bool IsValidAfterFormValidation()//through class to verify
    {
        if (CurrentEditContext == null) return false;
        var propertyName = string.IsNullOrEmpty(ValidationFieldName) ? Title : ValidationFieldName;
        var property = CurrentEditContext.Model?.GetType().GetProperty(propertyName);
        if (property == null)
        {
            Console.WriteLine($"Property '{propertyName}' does not exist in the model.");
            return true;
        }
        var fieldIdentifier = CurrentEditContext.Field(propertyName);
        _validationMsg = CurrentEditContext.GetValidationMessages(fieldIdentifier).ToList();
        return !_validationMsg.Any();
    }

    private List<string> _validationMsg = new List<string>();
    public List<string> ValidationMessage { get => _validationMsg; }

    private void GoPre()
    {
        if (_currentSelectorView == SelectorViews.DateSelector)
        {
            _showingMonth--;
            if (_showingMonth < 1)
            {
                _showingYear--;
                _showingMonth = 12;
            }
        }

        if (_currentSelectorView == SelectorViews.YearSelector)
        {
            _yearSelector!.GoPre();
        }
        InitDateViewOfMonth();
    }

    private void GoNext()
    {
        if (_currentSelectorView == SelectorViews.DateSelector)
        {
            _showingMonth++;
            if (_showingMonth > 12)
            {
                _showingYear++;
                _showingMonth = 1;
            }
            InitDateViewOfMonth();
        }

        if (_currentSelectorView == SelectorViews.YearSelector)
        {
            _yearSelector!.GoNext();
        }
    }

    private async Task OnSelectedDateChanging(DateTime dtSelected)
    {
        _selectedDate = dtSelected;
        _showingYear = dtSelected.Year;
        _showingMonth = dtSelected.Month;
        if (typeof(TValue) == typeof(DateTime) || typeof(TValue) == typeof(DateTime?))
        {
            Value = (TValue)(object)dtSelected;
            await ValueChanged.InvokeAsync(Value);
        }
        else
        {
            throw new Exception("Datepicker only accepts types related to dates like 'DateTime?' or 'DateTime'.");
        }
        await HideCalendar();
    }

    private string GetSelectedDateStr()
    {
        return Value == null ? "" : _selectedDate.ToString(DateFormatString);
    }

    private void SelectToday()
    {
        _selectedDate = DateTime.Today;
        _showingYear = _selectedDate.Year;
        _showingMonth = _selectedDate.Month;
        _currentSelectorView = SelectorViews.DateSelector;
        InitDateViewOfMonth();
    }

    private async Task TextBoxSelectedDateChanged(ChangeEventArgs e)
    {
        try
        {
            var dt = DateTime.ParseExact(e.Value.ToString(), DateFormatString, CultureInfo.InvariantCulture);
            if (dt < Minimum)
            {
                await OnSelectedDateChanging(Minimum);
                return;
            }
            else if (dt > Maximum)
            {
                await OnSelectedDateChanging(Maximum);
                return;
            }
            else
            {
                await OnSelectedDateChanging(dt);
            }
        }
        catch (Exception ex)
        {
            Value = default;
            await _txtSelectedDateStr.FocusAsync();
            InitDateViewOfMonth();
        }
    }

    private enum SelectorViews
    {
        DateSelector,
        MonthSelector,
        YearSelector
    }

    private void GotoSelectorView(SelectorViews selectorView)
    {
        if (selectorView == SelectorViews.YearSelector)
        {
            if (_showingYear < DefaultDisplayedMinYear + DefaultYearPageSize)
            {
                _isAllowGoPreYearPage = false;
                _isAllowGoNextYearPage = true;
            }
            if (_showingYear > DefaultDisplayedMaxYear - DefaultYearPageSize)
            {
                _isAllowGoNextYearPage = false;
                _isAllowGoPreYearPage = true;
            }
        }
        _currentSelectorView = selectorView;
    }

    private void MonthSelector_ChangeSelectedMonth(int month)
    {
        _showingMonth = month;
        _currentSelectorView = SelectorViews.DateSelector;
        InitDateViewOfMonth();
    }

    private void YearSelector_ChangeSelectedYear(int year)
    {
        _showingYear = year;
        _currentSelectorView = SelectorViews.MonthSelector;
        InitDateViewOfMonth();
    }

    public string GetMonthString(int month)
    {
        switch (month)
        {
            case 1: return "Jan";
            case 2: return "Feb";
            case 3: return "Mar";
            case 4: return "Apr";
            case 5: return "May";
            case 6: return "Jun";
            case 7: return "Jul";
            case 8: return "Aug";
            case 9: return "Sep";
            case 10: return "Oct";
            case 11: return "Nov";
            case 12: return "Dec";
            default: return "No Found";
        }
    }

    private bool _isAllowGoNextYearPage = true;
    private bool _isAllowGoPreYearPage = true;
    private bool CheckIsAllowPre()
    {
        switch (_currentSelectorView)
        {
            case SelectorViews.DateSelector:
                {
                    if (_showingYear == DefaultDisplayedMinYear && _showingMonth == 1) return false;
                    return true;
                }
            case SelectorViews.MonthSelector: return false;
            case SelectorViews.YearSelector:
                {
                    if (!_isAllowGoPreYearPage) return false;
                }
                return true;
            default: return true;
        }
    }

    private bool CheckIsAllowNext()
    {
        if (_currentSelectorView == SelectorViews.DateSelector)
        {
            if (_showingMonth == 12 && _showingYear == DefaultDisplayedMaxYear) return false;
        }
        if (_currentSelectorView == SelectorViews.MonthSelector) return false;
        if (_currentSelectorView == SelectorViews.YearSelector)
        {
            if (!_isAllowGoNextYearPage) return false;
        }
        return true;
    }

    private bool CheckIsValid()
    {
        if (CurrentEditContext != null) return IsValidAfterFormValidation();
        return true;
    }

    private ElementReference? _calendarModelEle;
    private ViewModels.Popup.AnchorPointType _anchorPointType = ViewModels.Popup.AnchorPointType.TriggerLeftBottom;
    private ViewModels.Popup.PopupToward _toward = ViewModels.Popup.PopupToward.BottomRight;
    private bool isAfterFirstTrigger = false;

    public async Task ShowCalendar()
    {
        if (Disabled || ReadOnly) return;
        if (!_showCalendar)
        {
            if (!_afterFirstFocus) _afterFirstFocus = true;
            _showCalendar = true;
            await JSRuntime.InvokeAsync<object>("MPDATEPICKER.show", _datepickerTriggerId, _calendarModelEle);
        }
        InitDateViewOfMonth();
    }

    [JSInvokable]
    public async Task HideCalendar()
    {
        if (_showCalendar)
        {
            _showCalendar = false;
            await JSRuntime.InvokeAsync<object>("MPDATEPICKER.hide", _datepickerTriggerId, _calendarModelEle);
            StateHasChanged();
        }
    }

    private async Task SwicthCalendarPopupVisible()
    {
        if (_showCalendar)
        {
            await HideCalendar();
        }
        else
        {
            await ShowCalendar();
        }
    }

    [JSInvokable]
    public async Task OnJumpSelectedDay(int day)
    {
        _selectedDate = _selectedDate.AddDays(day);
        _showingYear = _selectedDate.Year;
        _showingMonth = _selectedDate.Month;
        Value = (TValue)(object)_selectedDate;
        await ValueChanged.InvokeAsync(Value);
        InitDateViewOfMonth();
        StateHasChanged();
    }
}

