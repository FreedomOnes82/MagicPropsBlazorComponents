@using System.Text.RegularExpressions
@using Microsoft.JSInterop
@using System.Globalization
@inject IJSRuntime JSRuntime
@if (Visible)
{
    <div class="@(!string.IsNullOrEmpty(Title)?"mp-input-container":"")" id="@ClientID">
        <div class="mp-input-outline @(CheckIsValid()?"":"mp-input-err")" tabindex="0" style="width:@(Width==null?"auto":Width<100?"100px":Width.ToString()+"px");@(!string.IsNullOrEmpty(Title)?"margin-top: 15px;":"")">
            @if (ReadOnly)
            {
                <input class="mp-within-input" @bind-value="_inputValue" readonly id="@InputID" @onfocus="HandleFocus" @onblur="HandleBlur" />
            }
            else
            {
                <input class="mp-within-input" @bind-value="_inputValue" @oninput="HandleInput" id="@InputID" @onfocus="HandleFocus" @onblur="HandleBlur" />
            }

            <div class="mp-input-btn">
                <i class="fa fa-angle-up" @onclick="()=>DataOperate(true)" aria-hidden="true"></i>
                <i class="fa fa-angle-down ms-3" @onclick="()=>DataOperate(false)" aria-hidden="true"></i>
            </div>
        </div>
        @if (!string.IsNullOrEmpty(Title))
        {
            <div class="mp-input-text @(CheckIsValid()?"":"mp-input-errmsg-hide")" style="display:@(!string.IsNullOrEmpty(Title)?"flex":"none")">
                <label for="@InputID">
                    @Title
                </label>
            </div>
        }
    </div>
    <span class="mp-input-errmsg-hide @(!CheckIsValid()&&ShowErrorMsg?"mp-input-errmsg-show":"")" title="@_errmsg">@_errmsg </span>
}


@code {

    [Parameter]
    public decimal Value
    {
        get => _value ?? 0;
        set
        {
            if (_value != value)
            {
                _value = value;
                _inputValue = value.ToString(CultureInfo.InvariantCulture);
                if (CheckIsValid() && AfterVerified.HasDelegate)
                {
                    AfterVerified.InvokeAsync(true);
                }
                else if (!CheckIsValid() && AfterVerified.HasDelegate)
                {
                    AfterVerified.InvokeAsync(false);
                }
                ValueChanged.InvokeAsync(value);
                StateHasChanged();
            }
        }
    }
    [Parameter]
    public bool Visible { get; set; } = true;
    [Parameter]
    public string Title { get; set; } = string.Empty;
    [Parameter]
    public EventCallback<decimal> ValueChanged { get; set; }
    private string _inputValue = "0";
    private decimal? _value;
    [Parameter]
    public decimal Increment { get; set; } = decimal.One;
    [Parameter]
    public bool Required { get; set; } = true;
    [Parameter]
    public bool ReadOnly { get; set; } = false;
    [Parameter]
    public bool ShowErrorMsg { get; set; } = false;
    [Parameter]
    public string RangeErrorMsg { get; set; } = string.Empty;
    [Parameter]
    public string RequiredErrorMsg { get; set; } = string.Empty;
    [Parameter]
    public int? Width { get; set; }
    [Parameter]
    public decimal Minimum { get; set; } = decimal.MinValue;
    [Parameter]
    public decimal Maximum { get; set; } = decimal.MaxValue;
    [Parameter]
    public EventCallback OnFocus { get; set; }
    [Parameter]
    public EventCallback OnBlur { get; set; }
    [Parameter]
    public EventCallback<bool> AfterVerified { get; set; }
    [Parameter]
    public string ClientID { get; set; } = string.Empty;
    [Parameter]
    public string InputID { get; set; } = string.Empty;
    protected override void OnInitialized()
    {
        if (string.IsNullOrEmpty(ClientID))
            ClientID = "mpnumberinput_" + Guid.NewGuid().ToString().Replace("-", "");
        if (string.IsNullOrEmpty(InputID))
        {
            InputID = "input_" + Guid.NewGuid().ToString().Replace("-", "");
        }
    }

    private void DataOperate(bool isIncrese)
    {
        if (isIncrese)
        {
            Value += Increment;
        }
        else
        {
            Value -= Increment;
        }
    }
    private string _errmsg = string.Empty;
    private bool CheckIsValid()
    {
        if (!afterFisrtFocus) return true;
        if (Required && string.IsNullOrEmpty(_value.ToString()))
        {
            _errmsg = !string.IsNullOrEmpty(RequiredErrorMsg) ? RequiredErrorMsg : (string.IsNullOrEmpty(Title) ? "This field" : Title) + " is required";
            return false;
        }
        if (Value < Minimum)
        {
            _errmsg = !string.IsNullOrEmpty(RangeErrorMsg) ? RangeErrorMsg : "Minimum is " + Minimum;
            return false;
        }
        else if (Value > Maximum)
        {
            _errmsg = !string.IsNullOrEmpty(RangeErrorMsg) ? RangeErrorMsg : ("Maximum is " + Maximum);
            return false;
        }
        return true;
    }

    private bool isFocused = false;
    private async Task HandleFocus(FocusEventArgs e)
    {
        afterFisrtFocus = true;
        isFocused = true;
        if (OnFocus.HasDelegate)
        {
            await OnFocus.InvokeAsync();
        }
        await JSRuntime.InvokeVoidAsync("MPNumberInput.addListener", InputID, Increment);
        StateHasChanged();
    }
    private bool afterFisrtFocus = false;
    private async Task HandleBlur(FocusEventArgs e)
    {
        isFocused = false;
        if (OnBlur.HasDelegate)
        {
            await OnBlur.InvokeAsync();
        }
        await JSRuntime.InvokeVoidAsync("MPNumberInput.removeListener", InputID);
        StateHasChanged();
    }

    private void HandleInput(ChangeEventArgs e)
    {
        var input = e.Value?.ToString() ?? string.Empty;

        if (decimal.TryParse(input, NumberStyles.AllowDecimalPoint | NumberStyles.AllowLeadingSign, CultureInfo.InvariantCulture, out decimal result))
        {
            _inputValue = input;
            _value = result;
            ValueChanged.InvokeAsync(_value.Value);
        }
        else
        {
            _inputValue = _value?.ToString(CultureInfo.InvariantCulture) ?? "0";
        }

        StateHasChanged();
    }
}
